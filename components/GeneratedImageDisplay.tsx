import React from 'react';
import { ImageIcon } from './icons/ImageIcon';
import { DownloadIcon } from './icons/DownloadIcon';

interface GeneratedImageDisplayProps {
  isLoading: boolean;
  generatedImage: string | null;
  aspectRatio: string;
}

const LoadingSkeleton: React.FC = () => (
    <div className="w-full h-full bg-gray-700 animate-pulse-fast rounded-2xl flex items-center justify-center">
         <div className="text-center text-gray-400">
            <svg className="animate-spin mx-auto h-10 w-10 text-purple-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <p className="mt-4 text-lg">AI sedang berpikir...</p>
            <p className="text-sm">Ini bisa memakan waktu beberapa saat.</p>
        </div>
    </div>
);

const Placeholder: React.FC = () => (
    <div className="w-full h-full bg-gray-800/50 border-2 border-dashed border-gray-700 rounded-2xl flex items-center justify-center">
        <div className="text-center text-gray-500">
            <ImageIcon className="mx-auto h-16 w-16" />
            <p className="mt-4 text-lg">Gambar yang Anda buat akan muncul di sini</p>
        </div>
    </div>
);

const getAspectRatioClass = (ratio: string) => {
    switch (ratio) {
        case '1:1': return 'aspect-square';
        case '4:5': return 'aspect-[4/5]';
        case '9:16': return 'aspect-[9/16]';
        case '16:9': return 'aspect-[16/9]';
        case '4:3': return 'aspect-[4/3]';
        default: return 'aspect-square';
    }
};

export const GeneratedImageDisplay: React.FC<GeneratedImageDisplayProps> = ({ isLoading, generatedImage, aspectRatio }) => {
  
  const aspectRatioClass = getAspectRatioClass(aspectRatio);

  const handleSaveImage = () => {
    if (!generatedImage) return;
    const link = document.createElement('a');
    link.href = generatedImage;
    const mimeType = generatedImage.split(';')[0].split(':')[1];
    const extension = mimeType ? mimeType.split('/')[1] : 'png';
    link.download = `ai-edited-image.${extension}`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className={`relative flex items-center justify-center p-6 bg-gray-900/50 rounded-2xl border border-gray-700 shadow-2xl transition-all duration-300 ${aspectRatioClass}`}>
      <div className="w-full h-full">
        {isLoading ? (
          <LoadingSkeleton />
        ) : generatedImage ? (
          <>
            <img
              src={generatedImage}
              alt="Generated by AI"
              className="w-full h-full object-contain rounded-lg"
            />
            <button
              onClick={handleSaveImage}
              className="absolute bottom-4 left-1/2 -translate-x-1/2 flex items-center bg-purple-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-purple-700 transition-all duration-300 transform hover:scale-105 shadow-lg z-10"
              aria-label="Save generated image"
            >
              <DownloadIcon className="h-5 w-5 mr-2" />
              Simpan Gambar
            </button>
          </>
        ) : (
          <Placeholder />
        )}
      </div>
    </div>
  );
};